git-brash command: TAB补全

github：按 . 打开vscode

谷歌插件
octotree：支持单文件下载，搜索。但网不好还是下不了……

fork：可以代替git GUI使用

单文件夹克隆：Git1.7.0之后的Sparse Checkout模式，
git init
git remote add origin git@github.com:SunRiver-Kun/DSTMods.git
git config core.sparsecheckout true
echo sollyz >> .git/info/sparse-checkout
git pull origin master

少克隆历史记录
git clone --depth 1 https://github.com/SunRiver-Kun/Notes.git
git clone --depth 1 --shallow-submodules https://github.com/SunRiver-Kun/Notes.git

少克隆后重新获取分支
git fetch --tags
git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
git fetch --unshallow

克隆分支
git clone --branch Name xxx.git

文件瘦身
git gc

只下某种文件：echo *.cpp >> .git/info/sparse-checkout		前面也可以加路径，如  XXX/*.cpp
排除某文件夹（如C）：echo !C >> .git/info/sparse-checkout
回复检出设置：echo * >> .git/info/sparse-checkout	在有 \*  时无用
二次拉取：git checkout master

gitignore
#注释
/Assets/local/
/[Ll]ogs/
*.xxx
A/**/F/

git
加速：
1.镜像	https://github.com.cnpmjs.org/x

第一次使用：
//本地ssh和绑定到github 
ssh-keygen -t rsa -C "comment"
在C:\Users\Administrator\.ssh找id_rsa.pub，添加到github基本信息里，Ctrl+C/V
允许别人参与到public里，repository → Settings → Manage and access → Invite a collaborator
 
git config --global user.name "夏湾"
git config --global user.email "sunriver_kun@qq.com"
或者在.git/config里加入
[user]
name = SunRiver-NEU
email = sunriver_kun@qq.com

# 同一电脑多git #
git config --global  unset user.name
git config --global unset user.email
用fork登录多个账号，并对每个账号
git config user.name "Name"
git config user.email "email"



上传：
cd ./Desktop/xxx
git init
git add .		//git add xxx.cpp xxx.h	git add -v 
git add --all	//all包括删除的，. 不包括
git commit -m "HelloWorld"
//git commit -a -m "..."	直接一步到位

//git pull	可能需要先同步下数据
ssh：git@github.com:SunRiver-Kun/Notes.git
git remote add  origin https://github.com/SunRiver-Kun/sollyz.git	Notes.git
git push [-u] origin <local_branch>	// -u  也上传从local_branch的支流
git push --set-upstream origin sollyz (新分支)
git push 
git remote --v	//显示fetch and push 的远程仓库
git remote show origin	//查看远程仓库信息
git remote prune origin	//刷新本地仓库

初始化或下载：
git init
git clone https://github.com/SunRiver-NEU/sollyz.git
git fetch [branch=all]  //把远程所有分支都拷贝下来，包括log等	如果冲突时可以先fetch再比较

添加/提交/撤销：
git add .		git add -v		git add xx.cpp
git add --all	//包括删除，add . 不包括删除的
git commit -m "xxx"		
git commit -a -m "xxx"  自动add
git commit --amend -m "new xxx"
git checkout -- xxx.cpp 或 git reset 

远程同步/发布：origin/xxx
git pull	获取
git pull --rebase origin master     //解决non-fast-forward
git push [--set-upstream origin <branchname>]	推送，等于  fetch + merge
git push -u origin master

文件查看：用~	HEAD上次提交	HEAD^  HEAD^^ HEAD~num  前几次提交
git ls [-al|-s|-m|-l]		显示文件目录
git diff [--staged(缓版) | HEAD(工版)]	比较文件差异(默认在工作目录与暂存区，--staged在暂存区和本地git版本库)
git diff <branch1> <branch2> [filename]

git log --oneline  看日志，
git diff --name-status HEAD~num    你提交的那时起到现在的工作区的变化

git diff	未暂存的更改
git diff --cached	暂存和上次提交的差异
git diff HEAD [current]	上次提交和当前工作树的差异
git diff HEAD^ HEAD [filepath]  比较上上次提交和上次提交的更改
git diff --name-status [from  to]  仅显示名称和更改的类型

git diff dev master	  比较分支
git diff dev...master   在分支启动以来的更改

状态查看：
git status [-s]	 

日志查看：
git log [--oneline|--short]  [HEAD[^][<branchname>]|<tag>] [A(不属于)..B(属于)|filename]	同名优先级：HEAD>tag>heads>remotes
git log [--graph|--addrev-commit]
git show
git reflog [[<branchname|HEAD>]@{num}] [<branchname>@{yyyy.MM.dd | yesterday}]
git shortlog [-s|-n|-e]	
git reflog --date=iso


创建/移动/删除：
ls	dir	显示路径
git mkdir src
git mv xx.cpp src/
git rm xxx.cpp
--rm后回复
1.not commit：git reset → git checkout filename 
2.commit：git commit → git reset --hard <有文件的版本> → Ctrl+A/V → git reflog --online → git reset --hard <最新版本> → Ctrl+A/V 
git revert <id>	回退版本，但head向前，而reset向后
git checkout [HEAD~num] <file>	git log <file>

分支：切换分支，文件也会切换
git branch [<brachname>]  创建或显示分支	至少有一次提交后才能建分支
git checkout -b <brachname> 创建并切换分支	
git checkout -b <brachname> --track origin/<branchname>	 创建、切换分支并跟踪远程分支	
git checkout <branchname>	切换分支	- 表示上一个分支,在切换本地没有的分支的情况下，会新建个并试着联系远程同名分支	
git merge <branchname>  与当前分支合并，合并后就可以把删除分支了
git merge <branchname> --allow-unrelated-histories	与非同源分支合并
git branch -d <branchname>	删除分支	-D 强制
git branch -m <newname>	重命名分支
git rebase <branch>  把当前分支rebase到branch上，看上去就像当前分支是在branch上新开的。如果要推送到远端只能强推，要么强推前让大家本地没提交，要么等最后开发完直接rebase dev，再切到dev rebase下

git cherry --pick <brachname>  合并分支修改到当前分支

//保存当前分支内容
git stash
git stash list
git stash pop = git stash apply <list_name>  +   git stash drop<list_name>
git stash clear
git stash show	//查看栈中最新保存的stash和当前目录的差异

撤销变化：
git reset 不改变版本，撤销上一步（如add），相当于 git reset mixed HEAD
git reset --soft HEAD^	回到add .后，commit前。不改缓冲区
git reset [--mixed] HEAD^	回到add .前。只刷新缓冲区
git reset --hard HEAD^	改变工作目录文件！完全回退！
git checkout --filename 	刷新文件

子模块：
git submodule add git@github.com:...		//需要切换branch！
git submodule update //子模块需要手动刷新
 git submodule update --remote name	//
= git submodule init + git submodule update	空文件夹时用
git clone --recurse-submodules <remote>	//克隆包含子模块的项目
git pull --recurse-submodules	//更新全部，包括子模块
git config --global submodule.recurse true	//默认fetch子模块
git diff --submodule
git config --global diff.submodule log	//默认打印子模块的差异 


标签：
git tag -a -m "First Realse" v1
git tag --list

找bug：
git bisect start
git bisect bad v1.45
git bisect good v1.4
git bisect good/bad

GUI：
git gui

查找：
git grep "**/*.lua"
git grep "for" "**/*.lua"	//按q退出
git grep "scripts/"		//只匹配文件夹

帮助：
git --help
help help		→	help <-d|-m|-s> <command>
git help <command>	--跳转到html
info <command>
man -k <command>

区域快捷：
A..B	B --not A
A...B	A B --not $(git merge-base -all A B)
A^!	A^..A(非合并)或A --not A^@(排除祖先)