git-brash command: TAB补全

谷歌插件
octotree：支持单文件下载，搜索。但网不好还是下不了……

单文件夹克隆：Git1.7.0之后的Sparse Checkout模式，
例如：下载 codes.git里的C文件夹，也可以是C/XXX，  别写 " "
git init

git remote add origin git@github.com:SunRiver-Kun/DST_Notes.git
git config core.sparsecheckout true
echo C >> .git/info/sparse-checkout
git pull origin master



只下某种文件：echo *.cpp >> .git/info/sparse-checkout		前面也可以加路径，如  XXX/*.cpp
排除某文件夹（如C）：echo !C >> .git/info/sparse-checkout
回复检出设置：echo * >> .git/info/sparse-checkout	在有 \*  时无用
二次拉取：git checkout master

git
加速：
1.镜像	https://github.com.cnpmjs.org/x

第一次使用：
git config --global user.name "SunRiver-NEU"
git config --global user.email "sunriver_kun@qq.com"
或者在.git/config里加入
[user]
name = SunRiver-NEU
email = sunriver_kun@qq.com

上传：
cd ./Desktop/xxx
git init
git add .		//git add xxx.cpp xxx.h	git add -v 
git add --all	//all包括删除的，. 不包括
git commit-m "HelloWorld"
//git commit -a -m "..."	直接一步到位

//git pull	可能需要先同步下数据
ssh：git@github.com:SunRiver-Kun/Notes.git
git remote add  origin https://github.com/SunRiver-Kun/sollyz.git	Notes.git
git push [-u] origin <local_branch>	// -u  也上传从local_branch的支流
git push --set-upstream origin sollyz (新分支)
git push 
git remote --v	//显示fetch and push 的远程仓库
git remote show origin	//查看远程仓库信息
git remote prune origin	//刷新本地仓库

//本地ssh和绑定到github 
ssh-keygen [-t rsa] -C "comment"
在C:\Users\Administrator\.ssh找id_rsa.pub，添加到github基本信息里，Ctrl+C/V
允许别人参与到public里，repository → Settings → Manage and access → Invite a collaborator
 
初始化或下载：
git init
git clone https://github.com/SunRiver-NEU/sollyz.git
git fetch [branch=all]  //把远程所有分支都拷贝下来，包括log等

添加/提交/撤销：
git add .		git add -v		git add xx.cpp	
git commit -m "xxx"		
git commit -a -m "xxx"  自动add
git commit --amend -m "new xxx"
git checkout -- xxx.cpp 或 git reset 

远程同步/发布：origin/xxx
git pull	获取
git pull --rebase origin master     //解决non-fast-forward
git push [--set-upstream origin <branchname>]	推送
git push -u origin master

文件查看：
git ls [-al|-s|-m|-l]		显示文件目录
git diff [--staged(缓版) | HEAD(工版)]	比较文件差异(默认在工作目录与暂存区，--staged在暂存区和本地git版本库)
git diff <branch1> <branch2> [filename]
	
状态查看：
git status [-s]	 

日志查看：
git log [--oneline|--short]  [HEAD[^][<branchname>]|<tag>] [A(不属于)..B(属于)|filename]	同名优先级：HEAD>tag>heads>remotes
git log [--graph|--addrev-commit]
git show
git reflog [[<branchname|HEAD>]@{num}] [<branchname>@{yyyy.MM.dd | yesterday}]
git shortlog [-s|-n|-e]	

创建/移动/删除：
git mkdir src
git mv xx.cpp src/
git rm xxx.cpp
--rm后回复
1.not commit：git reset → git checkout filename 
2.commit：git commit → git reset --hard <有文件的版本> → Ctrl+A/V → git reflog --online → git reset --hard <最新版本> → Ctrl+A/V 

分支：
git branch [<brachname>]  创建或显示分支
git merge origin/<branchname>  与当前分支合并
git merge <branchname> --allow-unrelated-histories	与非同源分支合并
git checkout -b <brachname>	 创建并切换分支	
git checkout -b <brachname> --track origin/<branchname>	 创建、切换分支并跟踪远程分支	
git checkout <branchname>	切换分支		- 表示上一个分支,在切换本地没有的分支的情况下，会新建个并试着联系远程同名分支	
git branch -d <branchname>	删除分支	-D 强制
git branch -m <newname>	重命名分支

git cherry --pick <brachname>  合并分支修改到当前分支

//保存当前分支内容
git stash
git stash list
git stash pop = git stash apply <list_name>  +   git stash drop<list_name>
git stash clear
git stash show	//查看栈中最新保存的stash和当前目录的差异

撤销变化：
git reset 不改变版本，撤销上一步（如add），相当于 git reset mixed HEAD
git reset --soft HEAD^	回到add .后，commit前。不改缓冲区
git reset [--mixed] HEAD^	回到add .前。只刷新缓冲区
git reset --hard HEAD^	改变工作目录文件！完全回退！
git checkout --filename 	刷新文件

子模块：
git submodule add https://.../xxx.git
= git submodule init + git submodule update	空文件夹时用
git submodule update	//子模块需要手动刷新

标签：
git tag -a -m "First Realse" v1
git tag --list

找bug：
git bisect start
git bisect bad v1.45
git bisect good v1.4
git bisect good/bad

GUI：
git gui

查找：
git grep "**/*.lua"
git grep "for" "**/*.lua"	//按q退出
git grep "scripts/"		//只匹配文件夹

帮助：
git --help
help help		→	help <-d|-m|-s> <command>
git help <command>	--跳转到html
info <command>
man -k <command>

区域快捷：
A..B	B --not A
A...B	A B --not $(git merge-base -all A B)
A^!	A^..A(非合并)或A --not A^@(排除祖先)