1. 欧拉角：Quaternion.Euler(x, y, z); 	 //xyz为°，左手螺旋 0 1 0
2. Plane用MeshCollider。两个MeshCollider中至少有一个是Convex才会碰撞
3. GameObject可以从Scane中选，也可以从Prefab中。   
4. Instantiate：生成（激活的）新实例，并返回游戏对象/对象上的组件<T>。
Awake()立即调用，Start()下一帧调用 
5. 静止的物体可以借助Empty Object构成组，同时设为static。
经常运行的物体就少设parent，因为要执行局部全局坐标转换！
6. 非一致缩放：某些组件不支持，子对象在选择时不会自动更新缩放比例。	倾斜的__盒型碰撞体 (Box Collider)__ 无法准确匹配渲染网格的形状
7. 一般支持多选的都是按位0b发布的，使用时可以用<<确定具体值，如摄像机的Layout。[System.Flag] enum XXX{}
8. Relative Force：局部空间力，受物体旋转的影响。 
Force：全局力，不受物体影响
9. 复合碰撞体：根物体添加Rigibody[2D]，子物体添加Collider。
这样把脚本挂在根物体也可以 OnCollider/TriggerXXX
10. 默认两个Mesh Collider 不会发生碰撞，除非开了Convex（凸面外壳）
11.将网格碰撞体用于场景几何体，并使用复合原始碰撞体近似得出移动游戏对象的形状。
12. Collider interactions	注：两个触发器也会相互触发，可在Project Settings>Physics->Contact Pairs Mode里更改碰撞组
(dynamic)Rigidbody Collider：完全由引擎控制，与其他都发生碰撞和触发

Kinematic Rigidbody Collider：
-触发不受影响
-可通过Tranform组件改变位置而不触发碰撞和力。但也可以通过rigidbody.MovePosition来移动并产生碰撞
-常用与只在必要时运动，其他时候静止的物体（如：自动门）
-2D默认只与dynamic碰撞，不过可以勾选full rect与其他物体碰撞；
-3D只与dynamic碰撞
-触发器与全部反应

Static Collider：a Collider but no Rigidbody. 
-可以安全缩放，不移动，不会唤醒其他物体，只与dynamic碰撞
-碰撞也不会被移动
-触发：两静态不反应，其他反应

连续碰撞检测 (CCD)
	基于扫掠的 CCD：Collision Detection 设置为 Continuous 或 Continuous Dynamic。线，旋幽，慢
	推断性 CCD：Collision Detection 设置为 Continuous Speculative。线+角，幽灵

13. 协程注意：协程是挂在GameObject上的
gameObject.active = false 
可以停止该对象上全部协程的执行，即使再次激活，也不能继续执行。
MonoBehaviour enabled = false 
不能停止协程；对比 update却是可以在MonoBehaviour enabled = false 就中止

-IEnumerator 类型的（协程）方法不能带 ref 或者 out 型的参数，但可以带被传递的引用
-yield return null 跳过当前帧
-在函数 Update 和 FixedUpdate 中不能使用 yield 语句，否则会报错， 但是可以启动协程	不过Start可以写成协程
-在一个协程中，StartCoroutine()和 yield return StartCoroutine()是不一样的。
前者仅仅是开始一个新的Coroutine，这个新的Coroutine和现有Coroutine并行执行。
后者是返回一个新的Coroutine，是一个中断指令，
当这个新的Coroutine执行完毕后，才继续执行现有Coroutine。

14. damage用正数表示，Delta时取反即可
15. event 在Destroy GameObject时不会自动取消，要注意！！
16. 切换场景时数值型static的不会重置，Unity的Object引用会被消除null，除了DontDestroyOnLoad的obj都会变null
17.  克隆可以把要克隆的对象放到子物体并设为不激活，也可以从Prefab拖拽或根据路径动态加载
Instantiate，不要在Start或Awake中克隆自身，激活状态下，Awake()立即调用，Start()下一帧调用
AddComponent，不会调用Reset()，也不会自动初始化变量
Unity Editor只会在手动挂脚本时，帮忙初始化要显示的变量，并调用Reset()
18. 透明队列中的 2D 渲染器
排序图层和图层中的顺序>指定渲染队列>与摄像机的距离*透视/正交*自定义轴排序模式*精灵排序点> 
排序组>材质/着色器>多个渲染器具有相同的排序优先级时，将由仲裁程序决定优先级。
19. 2D Sprite Editor可以选择Custom Outline(减少渲染)/Physics Shape(Polygen碰撞体)，
Outline Tolerance控制误差范围，通过Generate快速生成。Secondary Texture用于Shader，名字如：_MaskTex
20. 渲染管线：
Edit > Project Settings > Quality > Render Pipeline
Edit > Project Settings > Graphics > Scriptable Render Pipeline Setting
21.  小心unsigned与负数  x+1 ? size()
22.  time -= maxtime || time+=maxtime 代替 time=0	避免时间错位
23. 脚本没写Start、Update等函数时会没有勾，适合写GLOBAL.cs。Awake里初始化单例，其他时候使用。
24. ScriptObject的物体返回时注意是返回副本(手动克隆)还是共用的(直接返回)！
25. 判断GameObject是否被删除可以用  ==null 来判断，Component用 this==null 来判断，本质是C++层对象被销毁，C#判断函数重载
用被销毁组件的this.gameObject会报错，但是如果先用个参数保存this.gameObject，就可以跳过this，直接判断gameObject
这个是重载与Object的==，被销毁了，但数值数据还没被销毁掉。
报错的条件：component被摧毁，用(this.)gameObject访问物体或其身上的组件。但如果用局部参数先存起来就不会报错
26. 跨Scene存数据
* 用PersistentScene（不被卸载的场景）做媒介
* 用static 值类型/event/引用	不过引用在使用前最好判断是否被销毁 ==null，其他正常使用即可
27. 百分比与分贝dB	scale [0f, 1f]	
currentdB = 10 * lg(scale) + maxdB  
scale = 10 ^ [ (currentdB - maxdB)/10 ]
28. 自定义脚本启动顺序：GLOBAL.cs必备！！不影响[RuntimeInitializeOnLoadMethod]
Editor -> Project Settings -> Script Execution Order	
负数先执行-> 其他 -> 正数，全部Awake完再次到Start等
PlayerLoop.GetCurrentPlayerLoop()  自定义每帧子系统执行步骤
29. UI可以建个Layer表，调整Z轴，用固定的API来在特定的层上打开Window

# UI 工具包#
1. 所有元素都继承VisualElement(样式、布局、事件)，在panel上才显示
2. 渲染次序是先父后子，即越深的显示在越上面。可以用BringToFront、SendToBack | PlaceBehind、PlaceFront 来改变父子|同级的渲染次序

# TextMeshProUGUI #  TMP    RichText->true   https://www.jianshu.com/p/86e347c776c6
<align="left"> </align>     <align="center"> </align>   <align="right"> </align>
<color="red"> </color>     <color=#005500> </color>   red green blue white black orange purple yellow
<alpha=#FF> </alpha>
<i> 斜体 </i>
<b> 加粗 </b>
<b><i> 粗斜  </i></b>
<cspace=1em> 字间距 </cspace>     <cspace=1px> 字间距 </cspace>
<font="Impact SDF">  </font>

# 粒子 #
一次性：最长时间 = startDelay + startLifeTime
持续：最长时间 = Duration +  startDelay + startLifeTime

-中文文档	docscloudstorage -> localized_docs/zh-cn
https://storage.googleapis.com/localized_docs/zh-cn/2020.3/UnityDocumentation.zip
扔到Unity/版本/Editor/Data/Documentation/en里
把下面的都删了，用Notepad++的在文件中查找会快一点（Ctrl+Shift+F），第一句第9行，第二在30行
<link href="https://fonts.googleapis.com/css....
<script cdn.cookielaw...

-特殊的文件夹：根目录在Asserts
-Editor：存放编辑器代码, EditorGUIUtility.Load 函数可从 Editor 文件夹中的 Resources 文件夹加载资源。这些资源只能通过 Editor 脚本加载，并会从构建中剥离。
-Resources：游戏必备的资源，是除代码外不会被Unity优化掉的东西，Resources.Load
-Editor Default Resources：必须位于Assets下，EditorGUIUtility.Load可以收到
-Gizmos： 必须位于Assets下，Gizmos.DrawIcon()加载图像
-StreamingAssets：让资源以其原始格式作为单独的文件提供，如IOS上Handheld.PlayFullScreenMovie 播放视频。放在Assets/下

特殊的代码名：
GameManager
导入时会忽略的东西：隐藏的文件夹、.头or~尾的文件和文件夹、.tmp的文件、名为cvs的文件和文件夹

- 优化：
材质：https://blog.csdn.net/qq_29266497/article/details/81515326
大小：纹理和音频，动画等压缩好。注：用不到的文件，在构建时不会包含进去，不用担心
速度：代码尽量不使用 var。不做少做做更好
Trace.WatchTime(()=>{...},1000000次)	--观察代码运行时间

- 想存储数据可以使用ScriptObject保存起来，常用于音频数据引用保存，
分数等下次加载时还用到的东西的保存。
[CreateAssetMenu(menuName="Settings",fileName="Settings")]

-版本控制：meta文件也要保存！
must only: Assets、Packages、ProjectSettings
ignore: Library、Logs、obj、UserSettings、.vs、.vscode

-光线
Window → Rendering → LightingSetting(添加天空盒)
Components{
	Projector：投影仪，可用于制作跟踪物体的影子
	LensFlare：镜头光班，特性
	遮挡 → Cookie，在Point Light里
}

- 特效 *先添加Volume组件*   Camera的Post Processing记得开
也可以导入Post Processing包
Bloom：曝光效果
Tonemapping：色调映射   ACES/Neutral/None
Color Adjustments：曝光、对比度等
Shadows xxx：阴影颜色控制等
Depth Of Field：景深
Vignette：晕映，让摄像机四周变黑之类的，增加恐怖效果

-分析：Window -> Analysis -> Profiler/Physics Debugger/Frame Debugger/IMGUI Debugger

-输入系统 Input System    package: Input System
Create Input Actions Asset -> New Action Map and Type -> 
Binding Input -> Add PlayerInput component 
启用/禁用
Edit => Project Setting => Player => Other Settings => Active Input Handling

------------------------------------------辅佐工具
package manager → Unity Registry（官方工具）
-3Dmax、Blender：制作模型，注意单位为米
-Cinemachine：方便的摄像机跟随等，可以配合Volume使用
-TimeLine：使用 Unity 的时间轴来创建电影内容、游戏序列、音频序列和复杂的粒子效果，常用于CG

模型类：
-2D Sprite Shape：用于创建更多变的地图  https://www.jianshu.com/p/100597b24f02
-Polybrush：网格绘制多边形
-Tenkoku=Dynamic Sky System：好全天候动态天空
-Foggy Lights：高质量的光晕
-Voxel Master：立体像素，类似“我的世界”

特效类：
-Yamaha、Adobe Audition：制作音频和混音
-Visual Effect Graph（VFX）：粒子特效集，建立丰富的特效。   GetWorldToObjectMatrix：https://answers.unity.com/questions/1821260/visual-effect-graph-does-not-work-with-urp.html

动画类：
-Dynamic Bone：动态骨骼，模拟衣物的飘动等
-Final IK：反向运动学
-Camera Path Animator：相机专用路径

编辑器：
-2D PSD Importer：加速PSD、PSB的导入导出
-Quick Search：Ctrl+'
-Recorder：录屏
-BehaviorTree：行为树
-Spline Editor：路径器

脚本类：
-Playmaker：可视化编程工具
-Lua Framework：ToLua

GUI类：
-TextMesh Pro：创建多变的文本，作为模型渲染
-Closing Credits：创建游戏结尾的滚动字幕
-UGallery Flow：图片墙预览
-Pro Chart：创建传统的图表
-UGUI Minimap：小地图制作
-DOTween Pro：一些简单的动作，也可用于其他非UI物体
-TextPacker：图集打包工具
-NGUI：高度自定义的插件（对比UGUI）

着色器：
-Cool Mobile Water：移动设备专用水面效果，两个摄像机，一个渲染水上，一个渲染水下
-Dynamic Volumetric Fog：动态体积雾，简单的
-Highlighting System：轮廓发光
-Paint in 3D：在模型上绘图
-See-Through  System：可配置的透明度，显示角色遮挡时的透明度
-Curved World：创建弧度的世界
-SoftShadow2D：软阴影

优化类：
-Job System：多线程编程框架，高性能、安全。	注：一般子线程无法操作Unity对象
-FPS Graph-Performance Analyzer：性能分析，帧数测试
-Asset Hunter2：消除多余的资源
-Dynamic Occlusion System：动态剔除，unity自带的只能剔除static物体
-Simple LOD：低模合成
-PoolManager：内存池

---------------------------------------------快捷键
按住右键旋转，鼠标中键平移，鼠标滚轮缩放
鼠标右键+WSAD：在透视模式下愉快地浏览Scene
Alt+左键：顶点旋转视角
Alt+右键：缩放
旋转和移动时，按住Ctrl，每次移动固定单元，可在Edit中设置单元
移动时，按住V，可选择顶点进行对齐
移动时轴中心点，按住Ctrl，按住Shift，可进行表面快速？
移动时，开启Global+右边的网格，可开启网格对齐；也可在Edit设置单元时点击轴来实现对齐
旋转时中心点，按住Ctrl+Shift，可进行朝向旋转
多边形碰撞器按Ctrl可清除多余连线

可在inspector中为物体选择图标，打开Gizmos就可以看见了（3D Icons调大小）
在inspector右下角可以设置标签，方便查找，直接输入并回车即可
Alt+‘，快速搜索
按住Alt可以展收子层级
GameObject菜单栏里的Align With View，可以快速帮摄像机对齐Scene里的视图

TileMap
Shift + 左键：临时橡皮擦
[, ]  顺逆旋转笔刷
Shift + [, ]   xy轴翻转笔刷
-=   加减z轴位置，仅Lock Z Position关时（在Tile Palette下面拉取）