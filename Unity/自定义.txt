using UnityEditor;
//动画：
AnimationUtility;
UnityEditor.Animations{
	AnimatorController、AnimatorControllerLayer、AnimatorStateMachine、
	AnimatorState、AnimatorStateTransition
}
//导入
UnityEditor.AssetImporters{
	[ScriptedImporter(1, "scml")]
	public class XXXImporter : ScriptedImporter {
	 	public override void OnImportAsset(AssetImportContext ctx){}  
	}
}

1.Editor
-建个Assets/Editor，在里面新建代码
-建立菜单栏和其功能

--菜单栏功能
using UnityEditor;
class XXX : EditorWindow
[MenuItem("MyTools/XXX")]   
public static void CreateWindow(){
    EditorWindow.GetWindow(typeof(CopyTransitions),true,"Copy Transitions");
}

绘制窗口
1、UnityEditor.Editor.OnInspectorGUI()    base.OnInspectorGUI()	target as xxx	
2、UnityEditor.Editor.OnSceneGUI()   Handles.XXX
3、UnityEditor.EditorWindow.OnGUI()

Editor	编辑器窗口
PropertyDrawer	Inspector属性绘制
EditorWindow	新窗口


EditorGUIlayout

属性：GameObject/ 下的会自动添加到右键菜单
[MenuItem("MyTools/Fn", true)] //static bool ValidFn() { Menu.SetCheck("MyTools/fn", bool); return true;  }   //同步函数，在点击之前完成，按钮会自己处理的
[MenuItem("MyTools/Fn")]	//static void fn(){ if(Menu.GetCheck("MyTools/fn")){...} else{...}  }	//在菜单栏上点击运行
[CustomEditor(typeof(XXX))]	//class : Editor	//XXX为可在Inspector显示的组件
[CustomPropertyDrawer(typeof(Data))] class : SerializableDictionaryPropertyDrawer	//自定义数据绘制


文件类：
using UnityEditor;
using UnityEngine;

FileUtil：创建/删除/移动/重命名文件
EditorUtility{
    SaveFolderPanel("Choose Location of Built Game", "", "");
    SaveFilePanel("save", "D:\\", "hello.txt", "txt");
}

2. ScriptObject	https://blog.csdn.net/candycat1992/article/details/52181814

3. 自定义文件类型导入（无法重写unity本就支持的类型的导入方法），继承：
using UnityEditor.AssetImporters; 
ScriptedImporter、ScriptedImporterEditor

-Editor 脚本
Scene 结构在 Editor 中和运行时都可用，并包含一些与场景本身相关的只读属性，例如其名称和资源路径。
EditorSceneManager 类仅在 Editor 中可用，可实现多场景编辑功能。
SceneSetup 类是，用于存储有关当前层级视图中的场景的信息。
Undo 和 PrefabUtility 类支持多个场景。
-可用 PrefabUtility.InstantiatePrefab 在给定场景中实例化预制件，
-并可使用 Undo.MoveGameObjectToScene 以不可撤销的方式将对象移动到场景的根目录。
注意：要使用 Undo.MoveGameObjectToScene，必须确保游戏对象已经位于当前场景的根目录中。

-提示和技巧
通过在拖动场景时按住 Alt，可将场景添加到层级视图，同时使其保持_卸载_状态。这样允许在稍后需要时再加载场景。
为避免每次重新启动 Unity 时都必须设置层级视图，或为了方便存储不同的设置，可使用 EditorSceneManager.GetSceneManagerSetup 获取一个描述当前设置的 SceneSetup 对象列表。然后，可将这些对象序列化为 ScriptableObject 或其他对象以及可能要存储的有关场景设置的所有其他信息。要恢复层级视图，只需重新创建 SceneSetup 列表并使用 EditorSceneManager.RestoreSceneManagerSetup。
若要在运行时获取加载的场景列表，只需使用 GetSceneAt 获取 sceneCount 并遍历这些场景。
可通过 GameObject.scene 获取游戏对象所属的场景，并可使用 SceneManager.MoveGameObjectToScene 将游戏对象移动到场景的根目录。
建议避免使用 DontDestroyOnLoad 来保持需要在多次场景加载后仍存在的管理器游戏对象。相反，应创建一个包含所有管理器的管理器场景，并使用 SceneManager.LoadScene(<path>, LoadSceneMode.Additive) 和 SceneManager.UnloadScene 来管理游戏进度。


-修改VsCode Snippets
C:\Users\Administrator\.vscode\extensions\kleber-swf.unity-code-snippets-1.3.0\snippets
替换：}",
为：", "{",

C:\Users\Administrator\.vscode\extensions\ms-dotnettools.csharp-1.24.0\snippets
++i
--i

预览打开  Link Opens In Peek   ->  false		minimap: false