1. 数据
var tb = {
	num : 1.5,
	str : 'string'  或  "string"
	arr : [ 'str1', 'str2', 'str3' ]	
};
for(var key in tb){ tb[key] }  //遍历私有属性

var arr = []
arr[0] = 1		-->   可用tb.length
arr["name"] = xxx	-->   tb.length变0了
for(var i=0; i<arr.length; ++i)
for(var v of arr)  不遍历私有属性（即只遍历数字索引0~N）
arr.forEach( (value, index)=>{} )

var x, y = 1;   
var x = 10;  //可重复var但不推荐

//ES2015(ES6)
let x, y = 1;         //{ }中的局部变量，默认都是全局作用域
const PI=3.14;	//常量


值类型(基本类型)：String、Number、Boolean、Null、Undefined、Symbol(ES6，独一无二的值)
引用数据类型（对象类型）：Object、Array、Function，RegExp(正则)、Date
任意赋值
var arr = new Array();    arr[i] = i;	var arr = ["1","2","3"]      arr = null;    arr = false
obj.xx  ==	 obj["xx"]


2. 打印  
print(...);
window.alert(...)    //弹出警告框  
console.log(str)    //打印到控制台
document.write(str)    //写成HTML元素	   
document.getElementById("name").innerHTML = "str";	//修改元素

3. HTML 中的 Javascript 脚本代码必须位于 <script> 与 </script> 标签之间。
Javascript 脚本代码可被放置在 HTML 页面的 <body> 和 <head> 部分中。
在 HTML 中, 全局变量是 window 对象，所以window 对象可以调用函数内的全局变量。
注意：所有数据变量都属于 window 对象。

4. 调用外部文件 <script src="myScript.js"></script>
5. document{    //HTML中的JS
	getElementById("name")	//对应 <p id="name"> </p>
	write(str)	//<h1>标题    <p>新行
}
6. function fn(value = 0){}   函数通常在head里，或body的最下面的<script></script>
<button type="button" onclick="fn()">尝试一下</button>
<button onclick="this.innerHTML=Date()">现在的时间是?</button>
(a, b) => {}
参数同Lua可省略，为undefined

省略参数
function(...args){
	for(var v of args){

	}
}
print( ...arr )  展开arr为 v1, v2这样的输入

7. 常见HTML回调
onchange	HTML 元素改变
onclick	用户点击 HTML 元素
onmouseover	鼠标指针移动到指定的元素上时发生
onmouseout	用户从一个 HTML 元素上移开鼠标时发生
onkeydown	用户按下键盘按键
onload	浏览器已完成页面的加载
8. 字符串
var str  = "string"    //String
var str2 = new String("str2")   //Object
str[index]    str + str + number	
9. 
10 == "10"    -->  true，离谱
===	绝对等于（值和类型均相等）
10. if、for、while、switch等同C
11.  typeof x       --> string ，括号可省
12. try{}  catch(err){}  finally{}     throw "XX"
13. "use strict";   使用严格模式
14.   var tb = []
tb[0] = 1		-->   可用tb.length
tb["name"] = xxx	-->   tb.length变0了
15. 定义数组时最后的, 不能多加
16. 在 JavaScript 中, null 用于对象, undefined 用于变量，属性和方法。
对象只有被定义才有可能为 null，否则为 undefined。
if (typeof myObj !== "undefined" && myObj !== null)
但是可以直接用 params==null 来判断是否传参了，即使params的类型是undefined

17. this
在方法(在{}中的函数)中，this 表示该方法所属的对象。
如果单独使用，this 表示全局对象。
在函数中，this 表示全局对象。
在函数中，在严格模式下，this 是未定义的(undefined)。
在事件中，this 表示接收事件的元素。
类似 call() 和 apply() 方法可以将 this 引用到任何对象。
18. 类
class Runoob extends A {
  constructor(name, year) {
	super(name);
    this.name = name;
    this.year = year;
  }
  age() {
    let date = new Date();
    return date.getFullYear() - this.year;
  }
  static fn(){
	return "XXX"
  }
  get sitename() {
    return this._sitename;
  }
  set sitename(x) {
    this._sitename = x;
  }
}
 
let runoob = new Runoob("菜鸟教程", 2018);
document.getElementById("demo").innerHTML =
"菜鸟教程 " + runoob.age() + " 岁了。";
19. 多文件调用
export function fn() { ... }
export{ fn, str, ... }
export default { name: value } //let default={name: value}  export{ default }


import { export1 [, export2 as alias2[, ...]] } from "module.js";  //导出特定的函数，变量(一般深拷贝)等      
import std_default from "module.js";  //导出default到std命名空间
import * as std from 'std.js';  //导出全部内容到std命名空间
import "init.js" //导入的时候会运行代码
import('module.js').then((std) => { ... });  //动态导入
20. 遍历表
for (var key in obj) {
  console.log('键名：', key);
  console.log('键值：', obj[key]);
}
21. 扩展函数/属性  https://www.runoob.com/js/js-object-prototype.html
所有的JavaScript对象都会从一个 prototype（原型对象）中继承属性和方法：会一层层向上找prototype
Array.prototype.fn = function(){ };
Array.prototype.value = 1;
[1,3].fn()


* 常用
Number{   //static
	MAX_VALUE
	MIN_VALUE
	NaN
	NEGATIVE_INFINITY
	POSITIVE_INFINITY
	parseFloat()  -->  字符串变浮点数
	parseInt()  --> 字符串变整数
	isFinite()	是否有限小数
	isInteger()  是否整数
}

String{
属性：
	length
	prototype
	constructor
方法:
	charAt()
	charCodeAt()
	concat()
	fromCharCode()
	indexOf()
	lastIndexOf()
	match()
	replace()
	search()
	slice()
	split()
	substr()
	substring()
	toLowerCase()
	toUpperCase()
	valueOf()
}

Array{  [1, 2, 3] ,  new Array() 
	length  
	concat()	连接两个或更多的数组，并返回结果。
	copyWithin()	从数组的指定位置拷贝元素到数组的另一个指定位置中。
	entries()	返回数组的可迭代对象。
	every()	检测数值元素的每个元素是否都符合条件。
	fill()	使用一个固定值来填充数组。
	filter()	检测数值元素，并返回符合条件所有元素的数组。
	find()	返回符合传入测试（函数）条件的数组元素。
	findIndex()	返回符合传入测试（函数）条件的数组元素索引。
	forEach()	数组每个元素都执行一次回调函数。 (value, index)=>{}
	from()	通过给定的对象中创建一个数组。
	includes()	判断一个数组是否包含一个指定的值。
	indexOf()	搜索数组中的元素，并返回它所在的位置。
	isArray()	判断对象是否为数组。
	join()	把数组的所有元素放入一个字符串。
	keys()	返回数组的可迭代对象，包含原始数组的键(key)。
	lastIndexOf()	搜索数组中的元素，并返回它最后出现的位置。
	map()	通过指定函数处理数组的每个元素，并返回处理后的数组。  新数组，不改变原本的
	pop()	删除数组的最后一个元素并返回删除的元素。
	push()	向数组的末尾添加一个或更多元素，并返回新的长度。
	reduce()	将数组元素计算为一个值（从左到右）。
	reduceRight()	将数组元素计算为一个值（从右到左）。
	reverse()	反转数组的元素顺序。
	shift()	删除并返回数组的第一个元素。
	slice()	选取数组的一部分，并返回一个新数组。
	some()	检测数组元素中是否有元素符合指定条件。
	sort()	对数组的元素进行排序。
	splice()	从数组中添加或删除元素。
	toString()	把数组转换为字符串，并返回结果。
	unshift()	向数组的开头添加一个或更多元素，并返回新的长度。
	valueOf()	返回数组对象的原始值。
	Array.of()	将一组值转换为数组。
	Array.at()	用于接收一个整数值并返回该索引对应的元素，允许正数和负数。负整数从数组中的最后一个元素开始倒数。
	Array.flat()	创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。
	Array.flatMap()	使用映射函数映射每个元素，然后将结果压缩成一个新数组。
	[index] -> value
}