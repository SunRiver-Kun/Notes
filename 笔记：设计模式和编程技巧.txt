is：继承/实现	use：成员变量

--设计模式
1. 创建型模式：创建对象的同时隐藏创建逻辑的方式，避免直接new
工厂模式(Factory Pattern)：创建屏蔽，扩展好！类多？对象复杂时
IX <-- A, B, C    IX Factory.Create(...) { return A?B?C;} 

抽象工厂模式(Abstract Factory Pattern)：保证只使用一种产品！扩展麻烦
抽象工厂->具体工厂->具体产品

单例模式(Singleton Pattern)：单例类仅一实例，且由自己创建，并提供给其他对象使用
线程安全->  
if(X==null) { lock();  if(X==null) X=new X(); unlock();} return X;   //需要锁，如果不锁就是线程不安全的
static X = new X();   Instance->X;    //容易产生垃圾
class X{class Y{static X = new X();}    Instance->Y.X;}   //不产生垃圾 

建造者模式(Builder Pattern)：组装，使用多个简单的对象一步一步构建成一个复杂的对象
MealBuilder -use> Meal ◆-> Item △--Burger(△--VerBugger/MeatBugger)/ColdDrink(△--Pepsi/Coke) 

原型模式(Prototype Pattern)：克隆，用于创建重复的对象，同时又能保证性能。缓存数据库数据
Clone()、A(const A&)、数据库buffer

2. 结构型模式：类和对象，继承用来组合接口、获取新功能
适配器模式(Adapter Pattern)：两个不兼容的接口之间的桥梁。灵活，复用，透明度！凌乱
void fn(){ if(...) old code;  else{adapter...} }	

桥接模式(Bridge Pattern)：抽象化与实现化解耦，使得二者可以独立变化。继承会爆炸时
class A{ IX api;  virtual fn(){ api.xxx(); }; }     IX抽象，A实现化

过滤器模式(Filter、Criteria Pattern)：使用不同的标准来过滤一组对象
find(objs, bool (*filter)(obj))

组合模式(Composite Pattern)：用于把一组相似的对象当作一个单一的对象
class Transform{ List<Transform> children}

装饰器模式(Decorator Pattern)：向一个现有的对象添加新的功能，同时又不改变其结构。扩展功能、动态增删！多层装饰比较复杂
abstract class Decorator : IShape { IShape x;  fn(){ x.fn() }... new code}    

外观模式(Facade Pattern)：隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。减少系统相互依赖、提高了安全性！不符合开闭原则、继承重写都不合适？系统复杂、子系统独立、预防低水平人员风险
ShapeMaker { drawA、drawB、drawC ... }  class A/B/C

享元模式(Flyweight Pattern)：减少创建对象的数量，以减少内存占用和提高性能。降低内存！复杂？缓冲池
Pool {pop/ push}	   Colors{ static Red, Blue, ...  }

代理模式(Proxy Pattern)：一个类代表另一个类的功能。不能改变接口(适配器)，也不是增删功能(装饰器)，而是加以控制 ? 运程代理、网络代理、同步化处理...

3. 行为型模式：对象之间的通信
责任链模式(Chain of Responsibility Pattern)：为请求的发送者创建接收者对象的链，消息会传下去直到被处理
Handler{Handler* next;   bool fn(...) { if(...) return next.fn(...);  else ... return true;  }}

命令模式(Command Pattern)：请求以命令的形式包裹在对象中，并传给调用对象。?CMD, GUI, Undo/Redo
client -> command -> Console -choose ICommand> ICommand.Run(...) 

解释器模式(Interpreter Pattern)：语法，解释器，运行。? SQL解析, 符号处理
IExpression△--TerminalExpression/AndExpression{ IExpression a,b }/OrExpression{ IExpression a,b }

迭代器模式(Iterator Pattern)：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。? iterator
deque:  _Ty* data[block][off]   block = (pos/blocksize) & (mapsize-1)  off = pos%blocksize     blocksize和mapsize是2的若干次方	 
list：_Ty*prev, *next;
map/set (tree):  _Ty* left, *right, *parent; 	红黑树 logN
unordered_map/set: list<_Ty> data;   vector<pair<list_iterator, list_iterator>> iterators;	key -> hash -> iterators[index] -list_iterator> value

中介者模式(Mediator Pattern)：封装一系列的对象交互，使各对象不需要显式地相互引用。一对多变一对一！庞大难维护？聊天室，不应当在职责混乱的时候使用。
user -send message> ChatRoom -broadcast> user1, user2, ...

备忘录模式(Memento Pattern)：保存一个对象的状态，可恢复对象！消耗资源？Ctrl+Z，存档
IUndoable{ GetState();  SetState(); }	stack<pair<IUndoable, state>> undostack;

观察者模式(Observer Pattern)：一个对象被修改时，则会自动通知依赖它的对象。
class A{ event e;  fn(){ e(...); } }  class B{ A.e += myfn; }

状态模式(State Pattern)：解决状态转移，状态决定内容？替换if、行为随状态改变
IState{ fn(context){context.SetState(this); ...} }	
Context{ GetState();  SetState(); }

策略模式(Strategy Pattern)：封装一组可以互相替代的算法族，由Context去调用算法
IStrategy△--Add/Sub	Context{ Set/GetStrategy();  run(){ strategy(...); } }

空对象模式(Null Object Pattern)：一个不做事的空对象取代 NULL 。？减少NULL判断

模板模式(Template Pattern)：执行步骤固定，子类重写某一方法而不改变顺序。方便扩展和维护！类多？复杂重复固定的方法
Game{final Play{...};  abstract init、start、end; }   

访问者模式(Visitor Pattern)：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。灵活，扩展！违反迪米特、依赖倒置原则，具体元素变更困难
ISlot{ accept(IVisitor); }	IVisitor{ visit(SlotA); visit(SlotB); visit(SlotC); }
SlotA/B/C : ISlot{ accept(IVisitor) { visitor.visit(this); }  }
Slots : ISlot{ vector<ISlot> slots;  accept(IVisitor){ foreach v : slots { v.accept(visitor); }  } }

4. J2EE模式：表示层
MVC 模式(MVC Pattern)：背包系统
-Model 模型代表存储数据的对象    		List<InventoryItem>   
-View 视图代表模型数据的可视化(UI)	InventorySlot
-Controller 控制器控制/更新模型和视图   	Inventory

业务代表模式(Business Delegate Pattern)：减少通信或远程查询功能。
-Client 客户端
-Business Delegate 业务代表，为客户端提供业务服务的访问
-LookUp Service 查找/获取业务服务对象，并提供给业务代表。服务工厂
-Business Service 业务服务，实际的业务实现逻辑
Client -use> BusinessDelegate -use> BusinessLookUp -find/generate>
	BusinessService △-- AService/...

组合实体模式(Composite Entity Pattern)：调用->子调用->....->实现
Client -use> Entity ◆-> Component ◆/◇-> DependentObject

数据访问对象模式(Data Access Object Pattern)：从高级业务服务中分离低级的数据访问/操作API
-Data Access Object Interface 数据访问对象接口，定义在模型对象上要执行的操作
-Data Access Object concrete class 数据访问对象实体类，获取并存储数据，实现上面的接口
-Model Object/Value Object  模型对象/数值对象，简单的数据集合
IStudentDatabase△--StudentDatabase ◆-> Student

前端控制器模式(Front Controller Pattern)：认证/授权/记录日志，跟踪请求。和业务代表模式很像
-Front Controller 前端控制器，汇聚请求，授权认证等处理后，转发给Dispatcher
-Dispatcher 调度器，调度请求到相应的具体处理程序
-View 视图，请求的具体处理程序
FrontController -use> Dispatcher -choose> View

拦截过滤器模式(Intercepting Filter Pattern)：对应用程序的请求或响应做一些预处理/后处理。其实可以用event代替
-Client Client 是向 Target 对象发送请求的对象
-Filter Manager 过滤管理器管理过滤器和过滤器链
-Filter Chain 过滤器链由Filter组成，在Target运行前/后，顺序调用
-Filter 过滤器在请求处理程序执行请求之前或之后，执行某些任务
-Target 请求处理程序
Client -use> Filter Manager -use> FilterChain {◆-> Filter; -use> Target}

服务定位器模式(Service Locator Pattern)：缓存查询
-服务器把查询的服务，缓存起来，下一次查找的时候就优先查找缓存
ServiceLocator {-use> Cache;  -use> LookUp -find> IService△--Service1, 2...}

传输对象模式(Transfer Object Pattern)：从客户端向服务器一次性传递带有多个属性的数据
-Business Object 业务对象，填充传输对象
-Transfer Object 传输对象，简单的结构体，可序列
-Client 客户端，发送请求或者发送传输对象到业务对象

--设计模式的六大原则
1. 开闭原则(Open Close Principle)：扩展开放，修改关闭。 - -> 接口/抽象类
2. 里氏代换原则(Liskov Substitution Principle)：基类使用的地方，用子类也可以
3. 依赖倒转原则(Dependence Inversion Principle)：针对接口编程，依赖于抽象而不依赖于具体
4. 接口隔离原则(Interface Segregation Principle)：使用多个隔离的接口，比使用单个接口要好。降低类之间的耦合性
5. 迪米特法则，又称最少知道原则(Demeter Principle)：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。
6. 合成复用原则(Composite Reuse Principle)：尽量使用合成/聚合的方式，而不是使用继承。




--编程技巧
RAII：对象生存期和资源管理 ，对象用于堆数据，析构delete。即生命周期(包括异常)时自动释放资源。<memory>   
KISS：Keep it simple, stupid，保持简单和直接，避免做一些没有必要的复杂工作
DRY：Don‘t reapeat yourself，避免复制粘贴，要学会抽象成函数之类的
SRP：Single Responsibility Principle，单一职责原则

信息隐蔽原则：避免暴露内部信息，而只给外界提供必要的接口
高内聚：把不相关的东西剔除；	低耦合：把具体抽象成接口
小心优化原则：不成熟的优化，只会把你的代码弄乱！

C++：
1. 写模版时，可以用begin()、end()，来代替成员函数
2. 尽量用智能指针、make_xxx，来代替new和delete。unique_ptr、shared_ptr、weak_ptr，不要用auto_ptr!!!
3. 避免环依赖，实在不行，建议用  weak_ptr
4. 容器的size()返回的是unsigned，小心隐性转换和负数(-1 -> UINT_MAX)
5. 比较从最小，或最右开始，避免条件覆盖

算法：

递归栈溢：可以用stack和while来代替递归

减少递归的方法———
回溯法：通过上一步对下一步进行约束，若最后不成功则撤回。Ctrl+Z
启发式算法：优先选择走法最少的下一步。即先尝试近的支线
缓存池：把之前算好的结果存起来，下次用的时候取出来而非递归
尾调用优化：用循环可以减少尾递归，通常可以提高效率

分治法：大而化小，分散聚合，问题独立
动态规划：复杂问题换简单问题，相互影响

--位逻辑的妙用
flag一般是2的n次方
&：
	hasflag (flags&flag)!=0     
	2的次方  v!=0 && (v&(v-1))==0	x = x&(x-1)  去掉开头的1，最终一直是0
	统计位1的个数   count=0;  while(x) { ++count;  x = x&(x-1); }
| ：addflag flags = flags|flag
^ ：x^x = 0,  0^y =y , x^y^x = y

--%
(a%p op b%p)%p = (a op b)%p 

--快速幂
int res = 1;	
while(b){
if(b&1) { res = (res*a)%p; } 
a = (a*a)%p;   b >>= 1;
}

--常见解法
子序列:从从字符串中删除一些字符后不更改剩余字符串字符顺序而生成的序列！
子 串:原序列中必须连续的一段！

BFS(广度优先)：queue，最长/最短路径
DFS(深度优先)：递归
N皇后，树，全排列：递归
字符串修改：动态规划，删/改，三方向
链表：it，flag
合并、unique：双指针
跳台阶：动态规划
最长公共子序列：二维动态规划
最长上升子序列：动态规划，dp[i] = 1 or 1 + max(dp[j])  --j<i && arr[j] < [i]，
零钱问题：for(auto& m : money) { for(v=m; v<V; ++v)  dp[v] = min(dp[v], dp[v-m]+1);   }