原则：
RAII：对象生存期和资源管理 ，对象用于堆数据，析构delete。即生命周期（包括异常）时自动释放资源。<memory>   
KISS：Keep it simple, stupid，保持简单和直接，避免做一些没有必要的复杂工作
DRY：Don‘t reapeat yourself，避免复制粘贴，要学会抽象成函数之类的
SRP：Single Responsibility Principle，单一职责原则
OCP：开闭原则，扩展开放，修改关闭。继承？
LSP：里氏替换原则，你无法给狗加四条腿当章鱼
ISP：接口隔离，避免接口太宽
DIP:Dependency Inversion Principle，依赖倒置原则，面向对象设计不应该具有特殊属性，而应在接口。

信息隐蔽原则：避免暴露内部信息，而只给外界提供必要的接口
高内聚：把不相关的东西剔除；	低耦合：把具体抽象成接口
小心优化原则：不成熟的优化，只会把你的代码弄乱！



C++：
1. 写模版时，可以用begin()、end()，来代替成员函数
2. 尽量用智能指针、make_xxx，来代替new和delete。unique_ptr、shared_ptr、weak_ptr，不要用auto_ptr!!!
3. 避免环依赖，实在不行，建议用  weak_ptr
4. 容器的size()返回的是unsigned，小心隐性转换和负数(-1 -> UINT_MAX)
5. 比较从最小，或最右开始，避免条件覆盖

算法：

递归栈溢：可以用stack和while来代替递归

减少递归的方法———
回溯法：通过上一步对下一步进行约束，若最后不成功则撤回。Ctrl+Z
启发式算法：优先选择走法最少的下一步。即先尝试近的支线
缓存池：把之前算好的结果存起来，下次用的时候取出来而非递归
尾调用优化：用循环可以减少尾递归，通常可以提高效率

分治法：大而化小，分散聚合