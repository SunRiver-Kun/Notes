*限制的使用*
class, import, export, let, for(var v of arr), ...agrs, const, function(arg=1), Array/List.find, "".startsWith

*客户端与服务端*
操作	客户	服务
typeof	string	object    ee.String
toString string	{...}
print	直接	运转

ee.XXXX是服务器对象(object)，转为本地要用getInfo([fn(value)])  如果没fn就是阻塞的
ee.XXX.evaluate(function(value) { ui.Label })

*数组*
List  --> .length  属性
ee.List -> .length()  函数

ui.data.ActiveList{  //操作对象，会影响UI的表现
	add(element)
	remove(element)
	insert(index, element)
	reset(list)
	set(index, element)
	
	get(index)
	length()

}

*多文件调用*
//module.js
exports.str = "";
exports.fn = function() { ... };
exports:
1. 引用还是引用，但不会变化
2. 返回值是obj时容易栈溢


//main.js
Number.prototype._G = {};
var _G = Number.prototype._G;

var sr = require('users/sunriverkun/gee_test:module.js');
sr.fn( std.str )
require: 
1. 无法在函数内require新的文件
2. require的参数只能是常量，即"..."，不接受任何path

*UI*
print(ui)   可以在控制台那显示，但不会在发布上的网站上显示
 ui{	//返回一个新实例
	root()	-->  根Panel，默认只有个map，且layout是水平
	Map(){	--> Map是这个的一个实例	 Map.drawingTools()   设置position后，只有一个UI无法调整位置
		var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};
		Map.addLayer(image.select('BandName'), ndviParams, 'LayerName');
	}
	style(){
		set(key, value)   -->  设置属性    key:str, value:...    
		set({ key:value })
		.key获取值
		{
			position: "top/middle/bottom-left/center/right"
			layout(Panel): ui.Panel.Layout.flow("horizontal"/"vertical")		absolute
			stretch: "horizontal/vertical/both",  //hL-hS只占一页  hL-vS匹配高滚动条
			height, maxHeight, minHeight (e.g. '100px')
			width, maxWidth, minWidth (e.g. '100px')
			padding(向外填充backgroundColor),   auto 自动匹配子widget的框   10%  百分百
			margin(距离上个widget) ('4px 4px 4px 4px' or  '4px')  上右下左  |  上下 左右     margin auto 居中
			color, backgroundColor (e.g. 'red' or '#FF0000')  可以有透明度
			border (e.g. '1px solid black')
			fontSize (e.g. '24px')
			fontWeight (e.g. 'bold' or '100')
			fontFamily (e.g. 'monospace' or 'serif')
			textAlign (e.g. 'left' or 'center')
			textDecoration (e.g. 'underline' or 'line-through')
			whiteSpace (e.g. 'nowrap' or 'pre')
			shown (true or false)
		}
	}
	
	Panel{
		layout: ui.Panel.Layout.flow("horizontal"/"vertical")		absolute
		 style: {width: '300px'}
	}

	Panel()
	Label("string")		 无法换行
	Button({ label:"str",  onClick: function(){ ... } })	color改text颜色，backgroundColor改外框颜色，内框改不了
	Checkbox("string", true)  -->   onChange( function(checked){ ... } )
	Slider()	-->  settValue(1)     onChange( function(value){ ... } )
	DateSlider
	Textbox(placeholder:"str")   -->  onChange(text){  } 
	Select({ items: Object.keys(tb) })  -->  onChange(key)
	Chart
	Thumbnail	-->  预览图片	
	SplitPanel

	图片：使用imageURL   https://fonts.google.com/icons
	1. 图标 -> ui.Label("", { padding: "24px", backgroundColor:"red"  })  --color无用
	2. 图片 -> ui.Label("hover", { backgroundColor:"FFFFFFF0" } , imageURL)   ui.Button... 无法改图片的大小，有些图有边框
	3. 表情 -> 按window+. 或在Edge中按右Ctrl左边的列表🚗

	data{
		ActiveList{
			ActiveList(list)
			add(element)
			insert(index,element)
			get(index)
			length()
			remove(element)
			reset(list={}) 用list覆盖当前的列表
			set(index, element)
			getJsArray() --> List<Object>
		}
	}
}


*几何*
ee.Geometry.Polygon

//ee.Object（服务器对象）是不可变的，一般返回的是copy
Image{	//基本光栅化图像
	Image('JAXA/ALOS/AW3D30/V2_2')
	select('BandName', 'B2', ...)  -->获得此波段的 Image
	select(['BandName1','BandName2'], ['NewName1, NewName2'])  -->重命名 Image
	set('属性名', 'value') --> copy Image
}
ImageCollection{	//图片的集合
ee.ImageCollection('COPERNICUS/S2_SR')
	.filterBounds(ee.Geometry.Point(-70.48, 43.3631))
	.filterDate('2019-01-01', '2019-12-31')
	.sort('CLOUDY_PIXEL_PERCENTAGE')
	.first() -> Image
	.map(function(Image){ return Image; })	--> map服务器并行每个元素(无法用print)，并要求返回同类型或Image, ImageCollection, Feature, FeatureCollection之一

	min、median、max、mode(最多)、mean(均值)、  每个波段分开取值，最后合成出新图，多用于不同时期的同一地区
	mosaic 顺序合成全部图像，每个像素，所以sort("云", false)递减的比较好	 多用于不同地区的
		SENSOR_ID会丢失导致ee.Algorithms.Landsat.simpleCloudScore无法使用，所以set("SENSOR_ID", "OLI_TIRS") //5->TM | 7->ETM | 8->OLI_TIRS
	qualityMosaic(bandName)  合成全部图像，每个像素用bandName最大的image的值

	function ClearCloud(image) {
    // Add a cloud score band.  It is automatically called 'cloud'.
    var scored = ee.Algorithms.Landsat.simpleCloudScore(image);
    // Create a mask from the cloud score and combine it with the image mask.
    var mask = scored.select(['cloud']).lte(20);
    // Apply the mask to the image and display the result.
    var masked = image.updateMask(mask);
    return masked;
	}


	map(function(image) { return image; })
	limit(num[, ...])
	merge(collection
	size()
}
Geometry基本矢量数据
Feature,有属性的矢量数据{
	getString("")  --> ee.String --> ee.String.compareTo("str")  无法直接==
}
FeatureCollectionFeature的集合
Reducer统计和分类的对象
Join集合分类
Array数组->多维分析

*Filter*
ee.Filter.eq/neq/gt/gte/lt/lte('字段','字段值');
ee.Filter.maxDifference('最大差值','字段','字段数值');
ee.Filter.stringStartsWith('字段'，'起始字符串')  
ee.Filter.stringEndsWith('字段'，'末尾字符串')
ee.Filter.rangeContains('字段'，'起始字母', '终止字母');
ee.Filter.listContains('字段'，'列表内包含值');
ee.Filter.inlist('字段'ee.List('A', 'B'));
ee.Filter.calendarRange(day1, day2, 'day_of_year');
ee.Filter.calendarRange(day1, day2, 'day_of_year');
ee.Filter.day_Of_Year(day1, day2);
ee.Filter.and(filter_A, filter_B);
ee.Filter.or(filter_A, filter_B);
filter_1.not();

*NDVI*
NDVI = (NIR - red)/(NIR + red)

var nir = image.select('B5');
var red = image.select('B4');
var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
//var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
Map.centerObject(image, 9);
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};	//blue:-1  green:1
Map.addLayer(ndvi, ndviParams, 'NDVI image');
var addNDVI = function(image) {
  var ndvi = image.normalizedDifference(['B5', 'B4']).rename('NDVI');
  return image.addBands(ndvi);
};

// Test the addNDVI function on a single image.  
//var ndvi = addNDVI(image).select('NDVI');
var withNDVI = ImageCollection.map(addNDVI);